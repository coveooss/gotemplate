<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gotemplate</title><link>https://coveooss.github.io/gotemplate/docs/basic_features/</link><description>Recent content on gotemplate</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://coveooss.github.io/gotemplate/docs/basic_features/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/arithmetic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/arithmetic/</guid><description>Arithmetic Addition Razor expression Go Template Result Note @(1 + 2); {{ add 1 2 }} 3 Addition @add(4, 5); {{ add 4 5 }} 9 or add @sum(6,7); {{ sum 6 7 }} 13 or sum @(2+3); {{ add 2 3 }} 5 Spaces are optional @( 8 + 9 ); {{ add 8 9 }} 17 You can insert an arbitrary number of spaces in expressions @sum(1.</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/assignation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/assignation/</guid><description>Assignation Global variables As in Go lang, you must initially declare your global variable using the := assignment operator and subsequent overwrite use the = operator.
Razor expression Go Template Note @string := &amp;quot;string value&amp;quot;; {{- set $ &amp;quot;string&amp;quot; &amp;quot;string value&amp;quot; }} Global declare and assign of string @numeric1 := 10; {{- set $ &amp;quot;numeric1&amp;quot; 10 }} Global declare and assign of integer @numeric2 := 1.</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/collections/</guid><description>Data collections (lists/slices and dicts/maps) Maps Razor Gotemplate Note @razorDict := dict(&amp;quot;test&amp;quot;, 1, &amp;quot;test2&amp;quot;, 2); {{- set $ &amp;quot;goDict&amp;quot; (dict &amp;quot;test&amp;quot; 1 &amp;quot;test2&amp;quot; 2) }} Creation @razorDict2 := dict(&amp;quot;test3&amp;quot;, 3, &amp;quot;test5&amp;quot;, 5); {{- set $ &amp;quot;goDict2&amp;quot; (dict &amp;quot;test3&amp;quot; 3 &amp;quot;test5&amp;quot; 5) }} Creation @set(.razorDict, &amp;quot;test2&amp;quot;, 3); {{- set .goDict &amp;quot;test2&amp;quot; 3 }} Update @set(.razorDict, &amp;quot;test3&amp;quot;, 4); {{- set .</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/comments/</guid><description>Comments in gotemplate It is important to notice that gotemplate doesn&amp;rsquo;t know the language you are using and any identified gotemplate code is executed no matter where it is. Comments in the host language mean nothing to gotemplate and will be evaluated.
Pseudo comment If you insert gotemplate code into file that contains another kind of code such as hcl, json, yaml, xml, java, c# or any other language, your code editor or linter may complains because it will detect invalid characters.</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/conditionals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/conditionals/</guid><description>Conditionals in gotemplate #! @{is_true_1} := true #! @{is_true_2} := true #! @{is_false_1} := false #! @{is_false_2} := false #! @{false_string} := &amp;#34;false&amp;#34; #! @-if($is_true_1) TestTrue #! @-end #! @-if($is_false_1) TestFalse #! @-end #! @-if(and($is_true_1, $is_true_2)) TestTrueAndTrue #! @-end #! @-if(and($is_true_1, $is_false_1)) TestTrueAndFalse #! @-end #! @-if(or($is_true_1, $is_false_1)) TestTrueOrFalse #! @-end #! @-if($false_string) FalseStringIsTrue #! @-end will give:
TestTrue TestTrueAndTrue TestTrueOrFalse FalseStringIsTrue</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/data/</guid><description>Data manipulation Using a data file with the following content in a format that doesn&amp;rsquo;t follow a standard.
IntegerValue = 1 FloatValue = 1.23 StringValue = &amp;quot;Foo bar&amp;quot; EquationResult = @(2 + 2 * 3 ** 6) ListValue = [&amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot;] DictValue = {&amp;quot;key1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot;} toYaml Razor Gotemplate @toYaml(data(include(&amp;quot;!Data&amp;quot;))) {{ toYaml (data (include &amp;quot;!Data&amp;quot;)) }} DictValue: key1: value1 key2: value2 EquationResult: 46658 FloatValue: 1.</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/literals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/literals/</guid><description>Literals protection E-Mail protection The razor convertor is designed to detect email address such as john.doe@company.com or alert@127.0.0.1.
But it you type something like @john.doe@company.com, it will try to resolve variable john.doe and company.com.
The result would be &amp;lt;no value&amp;gt;&amp;lt;no value&amp;gt; unless you have defined:
@john := data(&amp;#34;doe = 123.45&amp;#34;) @company := data(include(&amp;#34;com = @Math.Pi&amp;#34;)) In that case, the result of @john.doe@(company.com) will be 123.453.141592653589793.
&amp;ldquo;@&amp;rdquo; protection You can also render the &amp;ldquo;@&amp;rdquo; characters by writing @@.</description></item><item><title/><link>https://coveooss.github.io/gotemplate/docs/basic_features/os-commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://coveooss.github.io/gotemplate/docs/basic_features/os-commands/</guid><description>OS commands It is possible to run OS commands using the following go template functions:
exec returns the result of a shell command as structured data. run returns the result of a shell command as a string. exec Razor (exec) @{example} := exec(&amp;#34;printf &amp;#39;SomeData: test2\nSomeData2: test3&amp;#39;&amp;#34;) First result: @{example.SomeData} Second result: @{example.SomeData2} @{example} @{example2} := exec(&amp;#34;printf &amp;#39;Test&amp;#39;&amp;#34;) Should be `string`: @typeOf($example2) @{example2} Gotemplate (exec) {{- $example := exec &amp;#34;printf &amp;#39;SomeData: test2\nSomeData2: test3&amp;#39;&amp;#34; }} First result: {{ $example.</description></item></channel></rss>